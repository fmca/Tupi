{"name":"Tupi","tagline":"Language and compiler support to describe, expand and execute extended finite-state machines","body":"# Tupi\r\nLanguage and interpreter support to describe, expand and execute extended finite-state machines (EFSM).\r\n\r\n###Language\r\nThe main goal is to mimic every EFSM property in **code**:\r\n- Memory\r\n- States\r\n- Transitions\r\n- Events\r\n- Guards\r\n- Actions\r\n\r\nPlus additional concepts and features such as **polymorphism** and **pattern matching**. <br>\r\n**You can learn more in our [Wiki](https://github.com/fmca/Tupi/wiki)**\r\n\r\n###Interpreter\r\n\r\nThe interpreter is written in Java, so it will run in most platforms, even web pages.<br>Besides its main functionality, you can also enable the generation of ```dot``` files to illustrate any EFSM.\r\n\r\n###Input and Output\r\nUser input and console output are natively implemented as EFSMs. (I bet you started noticing that everything will be described using state-machines... everything!)\r\n\r\n\r\n###Code Example\r\n\r\nEvery event is described by a ```{EVENT}``` tag followed by one or more *transition pattern matches* ```[states_origin] -> newState```, a transition ```guard``` and an ```action``` to be executed.\r\n```\r\nuse tupi.list as List\r\n\r\nmachine Stack\r\n\r\n    memory\r\n        List list\r\n\r\n    states\r\n        empty, notempty\r\n\r\n    guards\r\n        init = true,\r\n        hasMore1Element = list.size > 1,\r\n        pushAllowed = true,\r\n       hasNoMore1Element = !hasMore1Element\r\n    actions\r\n        initialize\r\n            trigger {START} on list\r\n\r\n        addElement [int x]\r\n            trigger {add} on list with [x]\r\n            peek = list.last\r\n\r\n        deleteElement\r\n            trigger {delete} on list\r\n            peek = list.last\r\n\r\n\tevents\r\n\t        {START}\r\n\t            [*] -> empty                          | init\r\n\t                initialize [limit]\r\n\r\n\t        {PUSH} [int x]\r\n\t            [*empty] -> notempty           | pushAllowed\r\n\t                addElement [x]\r\n\r\n\t        {POP}\r\n\t            [notempty] -> empty            | hasNoMore1Element\r\n\t                deleteElement\r\n\r\n\t            [notempty] -> notempty       | hasMore1Element\r\n\t                deleteElement\r\n\r\n\r\n```\r\n\r\nYou can also extend an existent machine:\r\n\r\n```\r\nmachine SizeLimitedStack extends Stack\r\n    memory\r\n        int limit\r\n\r\n    states\r\n        full\r\n\r\n    guards\r\n        pushAllowed = list.size < limit,\r\n        newpush = !pushAllowed\r\n    actions\r\n        initialize [int x]\r\n            super.initialize\r\n            limit = x\r\n\r\n    events\r\n        {PUSH} [int x]\r\n            [*] -> full                  | newpush\r\n                addElement [x]\r\n\r\n        {POP}\r\n            [full] -> empty          | hasNoMore1Element\r\n                deleteElement\r\n            [full] -> notempty     | hasMore1Element\r\n                deleteElement\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}