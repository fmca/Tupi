/*
 * generated by Xtext
 */
package br.ufpe.cin.ui.labeling

import br.ufpe.cin.tupi.EventsDecl
import br.ufpe.cin.tupi.MachineBody
import br.ufpe.cin.tupi.StateDecl
import com.google.inject.Inject
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider
import br.ufpe.cin.tupi.GuardsDecl
import br.ufpe.cin.tupi.ActionsDecl
import br.ufpe.cin.tupi.MemoryDecl
import br.ufpe.cin.tupi.Transition
import br.ufpe.cin.tupi.TriggerEvent

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
class TupiLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	def text(MachineBody body){
		'Body'
	}
	
	def text(EventsDecl e){
		'Events'
	}
	
	def text(StateDecl s){
		'States'
	}
	
	def text(GuardsDecl g){
		'Guards'
	}
	
	def text(ActionsDecl a){
		'Actions'
	}
	
	def text(MemoryDecl m){
		'Memory'
	}
	
	def text(Transition t){
		'[' + t.originStates.join(",") + '] -> ' t.destState
	}
	
	def text(TriggerEvent t){
		t.event.name + ' on ' + t.machine.name
	}
	// Labels and icons can be computed like this:
	
//	def text(Greeting ele) {
//		'A greeting to ' + ele.name
//	}
//
//	def image(Greeting ele) {
//		'Greeting.gif'
//	}
}
