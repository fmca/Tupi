/*
 * generated by Xtext
 */
package br.ufpe.cin.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class TupiGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamespaceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamespaceNameSpaceParserRuleCall_0_0 = (RuleCall)cNamespaceAssignment_0.eContents().get(0);
		private final Assignment cUseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUseUseDeclParserRuleCall_1_0 = (RuleCall)cUseAssignment_1.eContents().get(0);
		private final Assignment cMachinesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMachinesMachineDeclParserRuleCall_2_0 = (RuleCall)cMachinesAssignment_2.eContents().get(0);
		
		//Model:
		//	namespace=NameSpace use+=UseDecl* machines+=MachineDecl*;
		@Override public ParserRule getRule() { return rule; }

		//namespace=NameSpace use+=UseDecl* machines+=MachineDecl*
		public Group getGroup() { return cGroup; }

		//namespace=NameSpace
		public Assignment getNamespaceAssignment_0() { return cNamespaceAssignment_0; }

		//NameSpace
		public RuleCall getNamespaceNameSpaceParserRuleCall_0_0() { return cNamespaceNameSpaceParserRuleCall_0_0; }

		//use+=UseDecl*
		public Assignment getUseAssignment_1() { return cUseAssignment_1; }

		//UseDecl
		public RuleCall getUseUseDeclParserRuleCall_1_0() { return cUseUseDeclParserRuleCall_1_0; }

		//machines+=MachineDecl*
		public Assignment getMachinesAssignment_2() { return cMachinesAssignment_2; }

		//MachineDecl
		public RuleCall getMachinesMachineDeclParserRuleCall_2_0() { return cMachinesMachineDeclParserRuleCall_2_0; }
	}

	public class NameSpaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NameSpace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//NameSpace:
		//	"namespace" name=QualifiedName;
		@Override public ParserRule getRule() { return rule; }

		//"namespace" name=QualifiedName
		public Group getGroup() { return cGroup; }

		//"namespace"
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}

	public class UseDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UseDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//UseDecl:
		//	"use" importedNamespace=QualifiedName;
		@Override public ParserRule getRule() { return rule; }

		//"use" importedNamespace=QualifiedName
		public Group getGroup() { return cGroup; }

		//"use"
		public Keyword getUseKeyword_0() { return cUseKeyword_0; }

		//importedNamespace=QualifiedName
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedName
		public RuleCall getImportedNamespaceQualifiedNameParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameParserRuleCall_1_0; }
	}

	public class MachineDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MachineDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMachineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSuperTypeTypeParserRuleCall_2_1_0 = (RuleCall)cSuperTypeAssignment_2_1.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyMachineBodyParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//MachineDecl:
		//	"machine" name=ID ("extends" superType=Type)? body=MachineBody;
		@Override public ParserRule getRule() { return rule; }

		//"machine" name=ID ("extends" superType=Type)? body=MachineBody
		public Group getGroup() { return cGroup; }

		//"machine"
		public Keyword getMachineKeyword_0() { return cMachineKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extends" superType=Type)?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superType=Type
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }

		//Type
		public RuleCall getSuperTypeTypeParserRuleCall_2_1_0() { return cSuperTypeTypeParserRuleCall_2_1_0; }

		//body=MachineBody
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//MachineBody
		public RuleCall getBodyMachineBodyParserRuleCall_3_0() { return cBodyMachineBodyParserRuleCall_3_0; }
	}

	public class MachineBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MachineBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMachineBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cMemoriesDeclAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMemoriesDeclMemoryDeclParserRuleCall_1_0 = (RuleCall)cMemoriesDeclAssignment_1.eContents().get(0);
		private final Assignment cStatesDeclAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatesDeclStateDeclParserRuleCall_2_0 = (RuleCall)cStatesDeclAssignment_2.eContents().get(0);
		private final Assignment cGuardsDeclAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGuardsDeclGuardsDeclParserRuleCall_3_0 = (RuleCall)cGuardsDeclAssignment_3.eContents().get(0);
		private final Assignment cActionsDeclAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActionsDeclActionsDeclParserRuleCall_4_0 = (RuleCall)cActionsDeclAssignment_4.eContents().get(0);
		private final Assignment cEventsDeclAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEventsDeclEventsDeclParserRuleCall_5_0 = (RuleCall)cEventsDeclAssignment_5.eContents().get(0);
		
		//MachineBody:
		//	{MachineBody} memoriesDecl=MemoryDecl? statesDecl=StateDecl? guardsDecl=GuardsDecl? actionsDecl=ActionsDecl?
		//	eventsDecl=EventsDecl?;
		@Override public ParserRule getRule() { return rule; }

		//{MachineBody} memoriesDecl=MemoryDecl? statesDecl=StateDecl? guardsDecl=GuardsDecl? actionsDecl=ActionsDecl?
		//eventsDecl=EventsDecl?
		public Group getGroup() { return cGroup; }

		//{MachineBody}
		public Action getMachineBodyAction_0() { return cMachineBodyAction_0; }

		//memoriesDecl=MemoryDecl?
		public Assignment getMemoriesDeclAssignment_1() { return cMemoriesDeclAssignment_1; }

		//MemoryDecl
		public RuleCall getMemoriesDeclMemoryDeclParserRuleCall_1_0() { return cMemoriesDeclMemoryDeclParserRuleCall_1_0; }

		//statesDecl=StateDecl?
		public Assignment getStatesDeclAssignment_2() { return cStatesDeclAssignment_2; }

		//StateDecl
		public RuleCall getStatesDeclStateDeclParserRuleCall_2_0() { return cStatesDeclStateDeclParserRuleCall_2_0; }

		//guardsDecl=GuardsDecl?
		public Assignment getGuardsDeclAssignment_3() { return cGuardsDeclAssignment_3; }

		//GuardsDecl
		public RuleCall getGuardsDeclGuardsDeclParserRuleCall_3_0() { return cGuardsDeclGuardsDeclParserRuleCall_3_0; }

		//actionsDecl=ActionsDecl?
		public Assignment getActionsDeclAssignment_4() { return cActionsDeclAssignment_4; }

		//ActionsDecl
		public RuleCall getActionsDeclActionsDeclParserRuleCall_4_0() { return cActionsDeclActionsDeclParserRuleCall_4_0; }

		//eventsDecl=EventsDecl?
		public Assignment getEventsDeclAssignment_5() { return cEventsDeclAssignment_5; }

		//EventsDecl
		public RuleCall getEventsDeclEventsDeclParserRuleCall_5_0() { return cEventsDeclEventsDeclParserRuleCall_5_0; }
	}

	public class EventsDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventsDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventsDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEventsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEventsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEventsEventParserRuleCall_2_0 = (RuleCall)cEventsAssignment_2.eContents().get(0);
		
		//EventsDecl:
		//	{EventsDecl} "events" events+=Event*;
		@Override public ParserRule getRule() { return rule; }

		//{EventsDecl} "events" events+=Event*
		public Group getGroup() { return cGroup; }

		//{EventsDecl}
		public Action getEventsDeclAction_0() { return cEventsDeclAction_0; }

		//"events"
		public Keyword getEventsKeyword_1() { return cEventsKeyword_1; }

		//events+=Event*
		public Assignment getEventsAssignment_2() { return cEventsAssignment_2; }

		//Event
		public RuleCall getEventsEventParserRuleCall_2_0() { return cEventsEventParserRuleCall_2_0; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersVariableListDeclParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		private final Assignment cTransitionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTransitionsTransitionParserRuleCall_4_0 = (RuleCall)cTransitionsAssignment_4.eContents().get(0);
		
		//Event:
		//	"{" name=ID "}" parameters=VariableListDecl? transitions+=Transition*;
		@Override public ParserRule getRule() { return rule; }

		//"{" name=ID "}" parameters=VariableListDecl? transitions+=Transition*
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }

		//parameters=VariableListDecl?
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }

		//VariableListDecl
		public RuleCall getParametersVariableListDeclParserRuleCall_3_0() { return cParametersVariableListDeclParserRuleCall_3_0; }

		//transitions+=Transition*
		public Assignment getTransitionsAssignment_4() { return cTransitionsAssignment_4; }

		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_4_0() { return cTransitionsTransitionParserRuleCall_4_0; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOriginStatesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOriginStatesSTATEPATTERNDECLParserRuleCall_3_0 = (RuleCall)cOriginStatesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOriginStatesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOriginStatesSTATEPATTERNDECLParserRuleCall_4_1_0 = (RuleCall)cOriginStatesAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDestStateAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cDestStateStateCrossReference_7_0 = (CrossReference)cDestStateAssignment_7.eContents().get(0);
		private final RuleCall cDestStateStateIDTerminalRuleCall_7_0_1 = (RuleCall)cDestStateStateCrossReference_7_0.eContents().get(1);
		private final Keyword cIfKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cGuardAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cGuardGuardCrossReference_9_0 = (CrossReference)cGuardAssignment_9.eContents().get(0);
		private final RuleCall cGuardGuardIDTerminalRuleCall_9_0_1 = (RuleCall)cGuardGuardCrossReference_9_0.eContents().get(1);
		private final Keyword cDoKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cActionAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final CrossReference cActionActionCrossReference_11_0 = (CrossReference)cActionAssignment_11.eContents().get(0);
		private final RuleCall cActionActionIDTerminalRuleCall_11_0_1 = (RuleCall)cActionActionCrossReference_11_0.eContents().get(1);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cLeftParenthesisKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cParametersAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cParametersXExpressionParserRuleCall_12_1_0 = (RuleCall)cParametersAssignment_12_1.eContents().get(0);
		private final Group cGroup_12_2 = (Group)cGroup_12.eContents().get(2);
		private final Keyword cCommaKeyword_12_2_0 = (Keyword)cGroup_12_2.eContents().get(0);
		private final Assignment cParametersAssignment_12_2_1 = (Assignment)cGroup_12_2.eContents().get(1);
		private final RuleCall cParametersXExpressionParserRuleCall_12_2_1_0 = (RuleCall)cParametersAssignment_12_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_12_3 = (Keyword)cGroup_12.eContents().get(3);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cEqualsSignGreaterThanSignKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cTriggersAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cTriggersTriggerEventParserRuleCall_13_1_0 = (RuleCall)cTriggersAssignment_13_1.eContents().get(0);
		
		//Transition:
		//	{Transition} "when" "[" originStates+=STATEPATTERNDECL? ("," originStates+=STATEPATTERNDECL)* "]" "->"
		//	destState=[State] "if" guard=[Guard] "do" action=[Action] ("(" parameters+=XExpression ("," parameters+=XExpression)*
		//	")")? ("=>" triggers+=TriggerEvent)*;
		@Override public ParserRule getRule() { return rule; }

		//{Transition} "when" "[" originStates+=STATEPATTERNDECL? ("," originStates+=STATEPATTERNDECL)* "]" "->" destState=[State]
		//"if" guard=[Guard] "do" action=[Action] ("(" parameters+=XExpression ("," parameters+=XExpression)* ")")? ("=>"
		//triggers+=TriggerEvent)*
		public Group getGroup() { return cGroup; }

		//{Transition}
		public Action getTransitionAction_0() { return cTransitionAction_0; }

		//"when"
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//originStates+=STATEPATTERNDECL?
		public Assignment getOriginStatesAssignment_3() { return cOriginStatesAssignment_3; }

		//STATEPATTERNDECL
		public RuleCall getOriginStatesSTATEPATTERNDECLParserRuleCall_3_0() { return cOriginStatesSTATEPATTERNDECLParserRuleCall_3_0; }

		//("," originStates+=STATEPATTERNDECL)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//originStates+=STATEPATTERNDECL
		public Assignment getOriginStatesAssignment_4_1() { return cOriginStatesAssignment_4_1; }

		//STATEPATTERNDECL
		public RuleCall getOriginStatesSTATEPATTERNDECLParserRuleCall_4_1_0() { return cOriginStatesSTATEPATTERNDECLParserRuleCall_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_6() { return cHyphenMinusGreaterThanSignKeyword_6; }

		//destState=[State]
		public Assignment getDestStateAssignment_7() { return cDestStateAssignment_7; }

		//[State]
		public CrossReference getDestStateStateCrossReference_7_0() { return cDestStateStateCrossReference_7_0; }

		//ID
		public RuleCall getDestStateStateIDTerminalRuleCall_7_0_1() { return cDestStateStateIDTerminalRuleCall_7_0_1; }

		//"if"
		public Keyword getIfKeyword_8() { return cIfKeyword_8; }

		//guard=[Guard]
		public Assignment getGuardAssignment_9() { return cGuardAssignment_9; }

		//[Guard]
		public CrossReference getGuardGuardCrossReference_9_0() { return cGuardGuardCrossReference_9_0; }

		//ID
		public RuleCall getGuardGuardIDTerminalRuleCall_9_0_1() { return cGuardGuardIDTerminalRuleCall_9_0_1; }

		//"do"
		public Keyword getDoKeyword_10() { return cDoKeyword_10; }

		//action=[Action]
		public Assignment getActionAssignment_11() { return cActionAssignment_11; }

		//[Action]
		public CrossReference getActionActionCrossReference_11_0() { return cActionActionCrossReference_11_0; }

		//ID
		public RuleCall getActionActionIDTerminalRuleCall_11_0_1() { return cActionActionIDTerminalRuleCall_11_0_1; }

		//("(" parameters+=XExpression ("," parameters+=XExpression)* ")")?
		public Group getGroup_12() { return cGroup_12; }

		//"("
		public Keyword getLeftParenthesisKeyword_12_0() { return cLeftParenthesisKeyword_12_0; }

		//parameters+=XExpression
		public Assignment getParametersAssignment_12_1() { return cParametersAssignment_12_1; }

		//XExpression
		public RuleCall getParametersXExpressionParserRuleCall_12_1_0() { return cParametersXExpressionParserRuleCall_12_1_0; }

		//("," parameters+=XExpression)*
		public Group getGroup_12_2() { return cGroup_12_2; }

		//","
		public Keyword getCommaKeyword_12_2_0() { return cCommaKeyword_12_2_0; }

		//parameters+=XExpression
		public Assignment getParametersAssignment_12_2_1() { return cParametersAssignment_12_2_1; }

		//XExpression
		public RuleCall getParametersXExpressionParserRuleCall_12_2_1_0() { return cParametersXExpressionParserRuleCall_12_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_12_3() { return cRightParenthesisKeyword_12_3; }

		//("=>" triggers+=TriggerEvent)*
		public Group getGroup_13() { return cGroup_13; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_13_0() { return cEqualsSignGreaterThanSignKeyword_13_0; }

		//triggers+=TriggerEvent
		public Assignment getTriggersAssignment_13_1() { return cTriggersAssignment_13_1; }

		//TriggerEvent
		public RuleCall getTriggersTriggerEventParserRuleCall_13_1_0() { return cTriggersTriggerEventParserRuleCall_13_1_0; }
	}

	public class ActionsDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionsDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionsDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActionsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionsActionParserRuleCall_2_0 = (RuleCall)cActionsAssignment_2.eContents().get(0);
		
		//ActionsDecl:
		//	{ActionsDecl} "actions" actions+=Action*;
		@Override public ParserRule getRule() { return rule; }

		//{ActionsDecl} "actions" actions+=Action*
		public Group getGroup() { return cGroup; }

		//{ActionsDecl}
		public Action getActionsDeclAction_0() { return cActionsDeclAction_0; }

		//"actions"
		public Keyword getActionsKeyword_1() { return cActionsKeyword_1; }

		//actions+=Action*
		public Assignment getActionsAssignment_2() { return cActionsAssignment_2; }

		//Action
		public RuleCall getActionsActionParserRuleCall_2_0() { return cActionsActionParserRuleCall_2_0; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cVariableListDeclAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableListDeclVariableListDeclParserRuleCall_1_0 = (RuleCall)cVariableListDeclAssignment_1.eContents().get(0);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockXBlockExpressionParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		
		//Action:
		//	name=ID variableListDecl=VariableListDecl? //TupiBlockExpression; //commands+=Command*;
		//	block=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }

		//name=ID variableListDecl=VariableListDecl? //TupiBlockExpression; //commands+=Command*;
		//block=XBlockExpression
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//variableListDecl=VariableListDecl?
		public Assignment getVariableListDeclAssignment_1() { return cVariableListDeclAssignment_1; }

		//VariableListDecl
		public RuleCall getVariableListDeclVariableListDeclParserRuleCall_1_0() { return cVariableListDeclVariableListDeclParserRuleCall_1_0; }

		////TupiBlockExpression; //commands+=Command*;
		//block=XBlockExpression
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }

		//XBlockExpression
		public RuleCall getBlockXBlockExpressionParserRuleCall_2_0() { return cBlockXBlockExpressionParserRuleCall_2_0; }
	}

	public class TriggerEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TriggerEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTriggerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEventEventCrossReference_1_0 = (CrossReference)cEventAssignment_1.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_1_0_1 = (RuleCall)cEventEventCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersXExpressionParserRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersXExpressionParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOnKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMachineAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cMachineMemoryCrossReference_3_1_0 = (CrossReference)cMachineAssignment_3_1.eContents().get(0);
		private final RuleCall cMachineMemoryIDTerminalRuleCall_3_1_0_1 = (RuleCall)cMachineMemoryCrossReference_3_1_0.eContents().get(1);
		
		//TriggerEvent:
		//	"trigger" event=[Event] (parameters+=XExpression ("," parameters+=XExpression)*)? ("on" machine=[Memory])?;
		@Override public ParserRule getRule() { return rule; }

		//"trigger" event=[Event] (parameters+=XExpression ("," parameters+=XExpression)*)? ("on" machine=[Memory])?
		public Group getGroup() { return cGroup; }

		//"trigger"
		public Keyword getTriggerKeyword_0() { return cTriggerKeyword_0; }

		//event=[Event]
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }

		//[Event]
		public CrossReference getEventEventCrossReference_1_0() { return cEventEventCrossReference_1_0; }

		//ID
		public RuleCall getEventEventIDTerminalRuleCall_1_0_1() { return cEventEventIDTerminalRuleCall_1_0_1; }

		//(parameters+=XExpression ("," parameters+=XExpression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//parameters+=XExpression
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }

		//XExpression
		public RuleCall getParametersXExpressionParserRuleCall_2_0_0() { return cParametersXExpressionParserRuleCall_2_0_0; }

		//("," parameters+=XExpression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//parameters+=XExpression
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }

		//XExpression
		public RuleCall getParametersXExpressionParserRuleCall_2_1_1_0() { return cParametersXExpressionParserRuleCall_2_1_1_0; }

		//("on" machine=[Memory])?
		public Group getGroup_3() { return cGroup_3; }

		//"on"
		public Keyword getOnKeyword_3_0() { return cOnKeyword_3_0; }

		//machine=[Memory]
		public Assignment getMachineAssignment_3_1() { return cMachineAssignment_3_1; }

		//[Memory]
		public CrossReference getMachineMemoryCrossReference_3_1_0() { return cMachineMemoryCrossReference_3_1_0; }

		//ID
		public RuleCall getMachineMemoryIDTerminalRuleCall_3_1_0_1() { return cMachineMemoryIDTerminalRuleCall_3_1_0_1; }
	}

	public class GuardsDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GuardsDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGuardsDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGuardsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGuardsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGuardsGuardParserRuleCall_2_0 = (RuleCall)cGuardsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGuardsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGuardsGuardParserRuleCall_3_1_0 = (RuleCall)cGuardsAssignment_3_1.eContents().get(0);
		
		//GuardsDecl:
		//	{GuardsDecl} "guards" guards+=Guard ("," guards+=Guard)*;
		@Override public ParserRule getRule() { return rule; }

		//{GuardsDecl} "guards" guards+=Guard ("," guards+=Guard)*
		public Group getGroup() { return cGroup; }

		//{GuardsDecl}
		public Action getGuardsDeclAction_0() { return cGuardsDeclAction_0; }

		//"guards"
		public Keyword getGuardsKeyword_1() { return cGuardsKeyword_1; }

		//guards+=Guard
		public Assignment getGuardsAssignment_2() { return cGuardsAssignment_2; }

		//Guard
		public RuleCall getGuardsGuardParserRuleCall_2_0() { return cGuardsGuardParserRuleCall_2_0; }

		//("," guards+=Guard)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//guards+=Guard
		public Assignment getGuardsAssignment_3_1() { return cGuardsAssignment_3_1; }

		//Guard
		public RuleCall getGuardsGuardParserRuleCall_3_1_0() { return cGuardsGuardParserRuleCall_3_1_0; }
	}

	public class GuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Guard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprXExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//Guard:
		//	name=ID "=" expr=XExpression;
		@Override public ParserRule getRule() { return rule; }

		//name=ID "=" expr=XExpression
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expr=XExpression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//XExpression
		public RuleCall getExprXExpressionParserRuleCall_2_0() { return cExprXExpressionParserRuleCall_2_0; }
	}

	public class MemoryDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MemoryDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMemoryDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMemoryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cMemoriesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cMemoriesMemoryParserRuleCall_2_0_0 = (RuleCall)cMemoriesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cMemoriesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cMemoriesMemoryParserRuleCall_2_1_1_0 = (RuleCall)cMemoriesAssignment_2_1_1.eContents().get(0);
		
		//MemoryDecl:
		//	{MemoryDecl} "memory" (memories+=Memory ("," memories+=Memory)*)?;
		@Override public ParserRule getRule() { return rule; }

		//{MemoryDecl} "memory" (memories+=Memory ("," memories+=Memory)*)?
		public Group getGroup() { return cGroup; }

		//{MemoryDecl}
		public Action getMemoryDeclAction_0() { return cMemoryDeclAction_0; }

		//"memory"
		public Keyword getMemoryKeyword_1() { return cMemoryKeyword_1; }

		//(memories+=Memory ("," memories+=Memory)*)?
		public Group getGroup_2() { return cGroup_2; }

		//memories+=Memory
		public Assignment getMemoriesAssignment_2_0() { return cMemoriesAssignment_2_0; }

		//Memory
		public RuleCall getMemoriesMemoryParserRuleCall_2_0_0() { return cMemoriesMemoryParserRuleCall_2_0_0; }

		//("," memories+=Memory)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//memories+=Memory
		public Assignment getMemoriesAssignment_2_1_1() { return cMemoriesAssignment_2_1_1; }

		//Memory
		public RuleCall getMemoriesMemoryParserRuleCall_2_1_1_0() { return cMemoriesMemoryParserRuleCall_2_1_1_0; }
	}

	public class MemoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Memory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Memory:
		//	type=Type name=ID;
		@Override public ParserRule getRule() { return rule; }

		//type=Type name=ID
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Assignment cTypeRefAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeRefJvmTypeReferenceParserRuleCall_0 = (RuleCall)cTypeRefAssignment.eContents().get(0);
		
		//Type:
		//	typeRef=JvmTypeReference;
		@Override public ParserRule getRule() { return rule; }

		//typeRef=JvmTypeReference
		public Assignment getTypeRefAssignment() { return cTypeRefAssignment; }

		//JvmTypeReference
		public RuleCall getTypeRefJvmTypeReferenceParserRuleCall_0() { return cTypeRefJvmTypeReferenceParserRuleCall_0; }
	}

	public class StateDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStatesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatesStateParserRuleCall_2_0 = (RuleCall)cStatesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStatesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_3_1_0 = (RuleCall)cStatesAssignment_3_1.eContents().get(0);
		
		//StateDecl:
		//	{StateDecl} "states" states+=State ("," states+=State)*;
		@Override public ParserRule getRule() { return rule; }

		//{StateDecl} "states" states+=State ("," states+=State)*
		public Group getGroup() { return cGroup; }

		//{StateDecl}
		public Action getStateDeclAction_0() { return cStateDeclAction_0; }

		//"states"
		public Keyword getStatesKeyword_1() { return cStatesKeyword_1; }

		//states+=State
		public Assignment getStatesAssignment_2() { return cStatesAssignment_2; }

		//State
		public RuleCall getStatesStateParserRuleCall_2_0() { return cStatesStateParserRuleCall_2_0; }

		//("," states+=State)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//states+=State
		public Assignment getStatesAssignment_3_1() { return cStatesAssignment_3_1; }

		//State
		public RuleCall getStatesStateParserRuleCall_3_1_0() { return cStatesStateParserRuleCall_3_1_0; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//State:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class STATEPATTERNDECLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "STATEPATTERNDECL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cAsteriskKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//STATEPATTERNDECL:
		//	"*"? ID "*"? | "*";
		@Override public ParserRule getRule() { return rule; }

		//"*"? ID "*"? | "*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"*"? ID "*"?
		public Group getGroup_0() { return cGroup_0; }

		//"*"?
		public Keyword getAsteriskKeyword_0_0() { return cAsteriskKeyword_0_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_1() { return cIDTerminalRuleCall_0_1; }

		//"*"?
		public Keyword getAsteriskKeyword_0_2() { return cAsteriskKeyword_0_2; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}

	public class VariableListDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableListDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariablesDeclAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesDeclVariableDeclParserRuleCall_1_0 = (RuleCall)cVariablesDeclAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariablesDeclAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariablesDeclVariableDeclParserRuleCall_2_1_0 = (RuleCall)cVariablesDeclAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VariableListDecl:
		//	"(" variablesDecl+=VariableDecl ("," variablesDecl+=VariableDecl)* ")";
		@Override public ParserRule getRule() { return rule; }

		//"(" variablesDecl+=VariableDecl ("," variablesDecl+=VariableDecl)* ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//variablesDecl+=VariableDecl
		public Assignment getVariablesDeclAssignment_1() { return cVariablesDeclAssignment_1; }

		//VariableDecl
		public RuleCall getVariablesDeclVariableDeclParserRuleCall_1_0() { return cVariablesDeclVariableDeclParserRuleCall_1_0; }

		//("," variablesDecl+=VariableDecl)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//variablesDecl+=VariableDecl
		public Assignment getVariablesDeclAssignment_2_1() { return cVariablesDeclAssignment_2_1; }

		//VariableDecl
		public RuleCall getVariablesDeclVariableDeclParserRuleCall_2_1_0() { return cVariablesDeclVariableDeclParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class VariableDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//VariableDecl:
		//	type=Type name=ID;
		@Override public ParserRule getRule() { return rule; }

		//type=Type name=ID
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final NameSpaceElements pNameSpace;
	private final UseDeclElements pUseDecl;
	private final MachineDeclElements pMachineDecl;
	private final MachineBodyElements pMachineBody;
	private final EventsDeclElements pEventsDecl;
	private final EventElements pEvent;
	private final TransitionElements pTransition;
	private final ActionsDeclElements pActionsDecl;
	private final ActionElements pAction;
	private final TriggerEventElements pTriggerEvent;
	private final GuardsDeclElements pGuardsDecl;
	private final GuardElements pGuard;
	private final MemoryDeclElements pMemoryDecl;
	private final MemoryElements pMemory;
	private final TypeElements pType;
	private final StateDeclElements pStateDecl;
	private final StateElements pState;
	private final STATEPATTERNDECLElements pSTATEPATTERNDECL;
	private final VariableListDeclElements pVariableListDecl;
	private final VariableDeclElements pVariableDecl;
	
	private final Grammar grammar;

	private final XbaseGrammarAccess gaXbase;

	@Inject
	public TupiGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.pModel = new ModelElements();
		this.pNameSpace = new NameSpaceElements();
		this.pUseDecl = new UseDeclElements();
		this.pMachineDecl = new MachineDeclElements();
		this.pMachineBody = new MachineBodyElements();
		this.pEventsDecl = new EventsDeclElements();
		this.pEvent = new EventElements();
		this.pTransition = new TransitionElements();
		this.pActionsDecl = new ActionsDeclElements();
		this.pAction = new ActionElements();
		this.pTriggerEvent = new TriggerEventElements();
		this.pGuardsDecl = new GuardsDeclElements();
		this.pGuard = new GuardElements();
		this.pMemoryDecl = new MemoryDeclElements();
		this.pMemory = new MemoryElements();
		this.pType = new TypeElements();
		this.pStateDecl = new StateDeclElements();
		this.pState = new StateElements();
		this.pSTATEPATTERNDECL = new STATEPATTERNDECLElements();
		this.pVariableListDecl = new VariableListDeclElements();
		this.pVariableDecl = new VariableDeclElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("br.ufpe.cin.Tupi".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//Model:
	//	namespace=NameSpace use+=UseDecl* machines+=MachineDecl*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//NameSpace:
	//	"namespace" name=QualifiedName;
	public NameSpaceElements getNameSpaceAccess() {
		return pNameSpace;
	}
	
	public ParserRule getNameSpaceRule() {
		return getNameSpaceAccess().getRule();
	}

	//UseDecl:
	//	"use" importedNamespace=QualifiedName;
	public UseDeclElements getUseDeclAccess() {
		return pUseDecl;
	}
	
	public ParserRule getUseDeclRule() {
		return getUseDeclAccess().getRule();
	}

	//MachineDecl:
	//	"machine" name=ID ("extends" superType=Type)? body=MachineBody;
	public MachineDeclElements getMachineDeclAccess() {
		return pMachineDecl;
	}
	
	public ParserRule getMachineDeclRule() {
		return getMachineDeclAccess().getRule();
	}

	//MachineBody:
	//	{MachineBody} memoriesDecl=MemoryDecl? statesDecl=StateDecl? guardsDecl=GuardsDecl? actionsDecl=ActionsDecl?
	//	eventsDecl=EventsDecl?;
	public MachineBodyElements getMachineBodyAccess() {
		return pMachineBody;
	}
	
	public ParserRule getMachineBodyRule() {
		return getMachineBodyAccess().getRule();
	}

	//EventsDecl:
	//	{EventsDecl} "events" events+=Event*;
	public EventsDeclElements getEventsDeclAccess() {
		return pEventsDecl;
	}
	
	public ParserRule getEventsDeclRule() {
		return getEventsDeclAccess().getRule();
	}

	//Event:
	//	"{" name=ID "}" parameters=VariableListDecl? transitions+=Transition*;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//Transition:
	//	{Transition} "when" "[" originStates+=STATEPATTERNDECL? ("," originStates+=STATEPATTERNDECL)* "]" "->"
	//	destState=[State] "if" guard=[Guard] "do" action=[Action] ("(" parameters+=XExpression ("," parameters+=XExpression)*
	//	")")? ("=>" triggers+=TriggerEvent)*;
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//ActionsDecl:
	//	{ActionsDecl} "actions" actions+=Action*;
	public ActionsDeclElements getActionsDeclAccess() {
		return pActionsDecl;
	}
	
	public ParserRule getActionsDeclRule() {
		return getActionsDeclAccess().getRule();
	}

	//Action:
	//	name=ID variableListDecl=VariableListDecl? //TupiBlockExpression; //commands+=Command*;
	//	block=XBlockExpression;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//TriggerEvent:
	//	"trigger" event=[Event] (parameters+=XExpression ("," parameters+=XExpression)*)? ("on" machine=[Memory])?;
	public TriggerEventElements getTriggerEventAccess() {
		return pTriggerEvent;
	}
	
	public ParserRule getTriggerEventRule() {
		return getTriggerEventAccess().getRule();
	}

	//GuardsDecl:
	//	{GuardsDecl} "guards" guards+=Guard ("," guards+=Guard)*;
	public GuardsDeclElements getGuardsDeclAccess() {
		return pGuardsDecl;
	}
	
	public ParserRule getGuardsDeclRule() {
		return getGuardsDeclAccess().getRule();
	}

	//Guard:
	//	name=ID "=" expr=XExpression;
	public GuardElements getGuardAccess() {
		return pGuard;
	}
	
	public ParserRule getGuardRule() {
		return getGuardAccess().getRule();
	}

	//MemoryDecl:
	//	{MemoryDecl} "memory" (memories+=Memory ("," memories+=Memory)*)?;
	public MemoryDeclElements getMemoryDeclAccess() {
		return pMemoryDecl;
	}
	
	public ParserRule getMemoryDeclRule() {
		return getMemoryDeclAccess().getRule();
	}

	//Memory:
	//	type=Type name=ID;
	public MemoryElements getMemoryAccess() {
		return pMemory;
	}
	
	public ParserRule getMemoryRule() {
		return getMemoryAccess().getRule();
	}

	//Type:
	//	typeRef=JvmTypeReference;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//StateDecl:
	//	{StateDecl} "states" states+=State ("," states+=State)*;
	public StateDeclElements getStateDeclAccess() {
		return pStateDecl;
	}
	
	public ParserRule getStateDeclRule() {
		return getStateDeclAccess().getRule();
	}

	//State:
	//	name=ID;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//STATEPATTERNDECL:
	//	"*"? ID "*"? | "*";
	public STATEPATTERNDECLElements getSTATEPATTERNDECLAccess() {
		return pSTATEPATTERNDECL;
	}
	
	public ParserRule getSTATEPATTERNDECLRule() {
		return getSTATEPATTERNDECLAccess().getRule();
	}

	//VariableListDecl:
	//	"(" variablesDecl+=VariableDecl ("," variablesDecl+=VariableDecl)* ")";
	public VariableListDeclElements getVariableListDeclAccess() {
		return pVariableListDecl;
	}
	
	public ParserRule getVariableListDeclRule() {
		return getVariableListDeclAccess().getRule();
	}

	//VariableDecl:
	//	type=Type name=ID;
	public VariableDeclElements getVariableDeclAccess() {
		return pVariableDecl;
	}
	
	public ParserRule getVariableDeclRule() {
		return getVariableDeclAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":" default=XExpression)?
	//	"}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | fallThrough?=",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">"
	//	(=> ({JvmInnerTypeReference.outer=current} ".") type=[JvmType|ValidID] ("<" arguments+=JvmArgumentTypeReference (","
	//	arguments+=JvmArgumentTypeReference)* ">")?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded returns JvmLowerBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXbase.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbase.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\""))* "\""? | "\'" ("\\" .
	//	/ * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\'"))* "\'"?;
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
