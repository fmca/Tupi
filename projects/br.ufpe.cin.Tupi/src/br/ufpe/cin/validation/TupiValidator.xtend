/*
 * generated by Xtext
 */
package br.ufpe.cin.validation

import br.ufpe.cin.jvmmodel.TupiJvmModelInferrer
import br.ufpe.cin.tupi.Event
import br.ufpe.cin.tupi.MachineDecl
import br.ufpe.cin.tupi.Transition
import br.ufpe.cin.tupi.TupiPackage
import com.google.inject.Inject
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.validation.Check
import org.eclipse.xtext.xbase.interpreter.impl.XbaseInterpreter
import org.eclipse.xtext.xbase.typesystem.computation.ITypeComputer

//import org.eclipse.xtext.validation.Check
/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class TupiValidator extends AbstractTupiValidator {
	@Inject private XbaseInterpreter xbaseInterpreter;
	@Inject private ITypeComputer typeComputer
	@Inject private TupiJvmModelInferrer jvmInferrer

	@Check
	def checkMachineNameCapital(MachineDecl machine) {
		if (Character.isLowerCase((machine.name.charAt(0)))) {
			warning("Review first letter (lower case).", TupiPackage.Literals.MACHINE_DECL__NAME);
		}
	}

	@Check
	def checkSelfInheritance(MachineDecl machine) {
		var machineName = machine.name;
		var extendMachineName = machine.superType.name;

		if (machineName.equals(extendMachineName))
			error("Machine cannot extends itself", TupiPackage.Literals.MACHINE_DECL__SUPER_TYPE);
	}

	@Check
	def checkStartConstructor(Event event) {

		val getStartEvent = [ MachineDecl a |
			a.body?.eventsDecl?.events.filter[Event e|e.name.toLowerCase.equals("start")]?.get(0)
		]
		val compareParamSizes = [ Event a, Event b |
			a.parameters?.variablesDecl?.size == b.parameters?.variablesDecl?.size
		]

		val isTypesEquals = [ Event a, Event b |
			var answer = true;
			for (var i = 0; i < a.parameters?.variablesDecl?.size; i++) {
				val superParamType = a.parameters.variablesDecl.get(0).type.typeRef.qualifiedName
				val thisParamType = b.parameters.variablesDecl.get(0).type.typeRef.qualifiedName

				answer = answer && superParamType.equals(thisParamType)
			}
			answer
		]

		if (event.name.toLowerCase.equals("start")) {
			val machine = EcoreUtil2.getContainerOfType(event, MachineDecl);
			if (machine.superType != null) {
				val event2 = getStartEvent.apply(machine.superType);
				InputOutput.println("sizes: " + compareParamSizes.apply(event, event2) + ", types: " +
					isTypesEquals.apply(event, event2));
				if (!(compareParamSizes.apply(event, event2) && isTypesEquals.apply(event, event2))) {
					error("{Start} parameters must be the same of the super machine.",
						TupiPackage.Literals.EVENT__PARAMETERS);
				}
			}
		}

	}

	@Check
	def checkParameterSize(Transition t) {
		val transSize = t.parameters?.size;
		val actionSize = t.action.variableListDecl?.variablesDecl?.size;

		if (transSize != actionSize) {
			error("Wrong number of parameters.", TupiPackage.Literals.TRANSITION__PARAMETERS)
		}
	}

}
