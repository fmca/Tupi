/**
 * generated by Xtext
 */
package br.ufpe.cin.generator;

import br.ufpe.cin.generator.Event;
import br.ufpe.cin.generator.MachineDeclared;
import br.ufpe.cin.tupi.EventsDecl;
import br.ufpe.cin.tupi.Guard;
import br.ufpe.cin.tupi.MachineBody;
import br.ufpe.cin.tupi.MachineDecl;
import br.ufpe.cin.tupi.Model;
import br.ufpe.cin.tupi.State;
import br.ufpe.cin.tupi.StateDecl;
import br.ufpe.cin.tupi.Transition;
import br.ufpe.cin.tupi.Type;
import com.google.common.base.Objects;
import java.util.HashMap;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class TupiGenerator implements IGenerator {
  private HashMap<String, MachineDeclared> mapMachine = new HashMap<String, MachineDeclared>();
  
  private MachineDeclared machineMapped = null;
  
  private Event eventAux = null;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    EList<EObject> _contents = resource.getContents();
    EObject _head = IterableExtensions.<EObject>head(_contents);
    this.createFiles(((Model) _head), fsa);
    this.mapMachine.clear();
  }
  
  public void createFiles(final Model model, final IFileSystemAccess fsa) {
    EList<MachineDecl> _machines = model.getMachines();
    for (final MachineDecl machine : _machines) {
      String _name = machine.getName();
      String _plus = (_name + ".dot");
      CharSequence _dotCode = this.toDotCode(machine);
      fsa.generateFile(_plus, _dotCode);
    }
  }
  
  public String className(final Resource res) {
    URI _uRI = res.getURI();
    String name = _uRI.lastSegment();
    int _indexOf = name.indexOf(".");
    return name.substring(0, _indexOf);
  }
  
  public CharSequence toDotCode(final MachineDecl machine) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _declareMachine = this.declareMachine(machine);
    _builder.append(_declareMachine, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence declareMachine(final MachineDecl machine) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("digraph ");
    String _name = machine.getName();
    _builder.append(_name, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("rankdir=LR;");
    _builder.newLine();
    _builder.append("\t");
    String _name_1 = machine.getName();
    MachineDeclared _machineDeclared = new MachineDeclared();
    MachineDeclared _put = this.mapMachine.put(_name_1, this.machineMapped = _machineDeclared);
    _builder.append(_put, "\t");
    _builder.newLineIfNotEmpty();
    {
      Type _superType = machine.getSuperType();
      boolean _notEquals = (!Objects.equal(_superType, null));
      if (_notEquals) {
        _builder.append("\t");
        Type _superType_1 = machine.getSuperType();
        JvmTypeReference _typeRef = _superType_1.getTypeRef();
        MachineDeclared _get = this.mapMachine.get(_typeRef);
        this.machineMapped.heritage(_get);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    MachineBody _body = machine.getBody();
    this.createClass(_body);
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    MachineBody _body_1 = machine.getBody();
    CharSequence _declareBody = this.declareBody(_body_1);
    _builder.append(_declareBody, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public void createClass(final MachineBody body) {
    StateDecl _statesDecl = body.getStatesDecl();
    EList<State> _states = _statesDecl.getStates();
    for (final State state : _states) {
      String _name = state.getName();
      boolean _contains = this.machineMapped.states.contains(_name);
      boolean _not = (!_contains);
      if (_not) {
        String _name_1 = state.getName();
        this.machineMapped.states.add(_name_1);
      }
    }
    EventsDecl _eventsDecl = body.getEventsDecl();
    EList<br.ufpe.cin.tupi.Event> _events = _eventsDecl.getEvents();
    for (final br.ufpe.cin.tupi.Event event : _events) {
      {
        for (final Event eventComp : this.machineMapped.events) {
          String _name_2 = event.getName();
          boolean _equals = eventComp.name.equals(_name_2);
          if (_equals) {
            this.machineMapped.events.remove(eventComp);
          }
        }
        String _name_3 = event.getName();
        Event _event = new Event(_name_3);
        this.machineMapped.events.add(this.eventAux = _event);
        EList<Transition> _transitions = event.getTransitions();
        for (final Transition trans : _transitions) {
          EList<String> _originStates = trans.getOriginStates();
          for (final String originState : _originStates) {
            {
              final String regex = originState.replace("*", ".*");
              for (final String state_1 : this.machineMapped.states) {
                boolean _matches = state_1.matches(regex);
                if (_matches) {
                  State _destState = trans.getDestState();
                  String _name_4 = _destState.getName();
                  Guard _guard = trans.getGuard();
                  String _name_5 = _guard.getName();
                  br.ufpe.cin.generator.Transition _transition = new br.ufpe.cin.generator.Transition(state_1, _name_4, _name_5);
                  this.eventAux.trans.add(_transition);
                }
              }
            }
          }
        }
      }
    }
  }
  
  public CharSequence declareBody(final MachineBody body) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//states");
    _builder.newLine();
    {
      for(final String state : this.machineMapped.states) {
        _builder.append(state, "");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("//edges");
    _builder.newLine();
    {
      for(final Event event : this.machineMapped.events) {
        {
          for(final br.ufpe.cin.generator.Transition tran : event.trans) {
            _builder.append(tran.originState, "");
            _builder.append("->");
            _builder.append(tran.destState, "");
            _builder.append(" [label=\"");
            _builder.append(event.name, "");
            _builder.append(" | ");
            _builder.append(tran.guard, "");
            _builder.append("\"]; ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
}
